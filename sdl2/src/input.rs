use chargrid_input::{keys, Key};
use sdl2::keyboard::{Keycode, Mod};

macro_rules! convert_char_shift {
    ($lower:expr, $upper:expr, $shift:expr) => {
        Key::Char(if $shift { $upper } else { $lower })
    };
}

pub fn sdl2_to_chargrid(keycode: Keycode, mod_: Mod) -> Option<Key> {
    let shift = mod_.intersects(Mod::LSHIFTMOD | Mod::RSHIFTMOD);
    let key = match keycode {
        Keycode::Space => Key::Char(' '),
        Keycode::A => convert_char_shift!('a', 'A', shift),
        Keycode::B => convert_char_shift!('b', 'B', shift),
        Keycode::C => convert_char_shift!('c', 'C', shift),
        Keycode::D => convert_char_shift!('d', 'D', shift),
        Keycode::E => convert_char_shift!('e', 'E', shift),
        Keycode::F => convert_char_shift!('f', 'F', shift),
        Keycode::G => convert_char_shift!('g', 'G', shift),
        Keycode::H => convert_char_shift!('h', 'H', shift),
        Keycode::I => convert_char_shift!('i', 'I', shift),
        Keycode::J => convert_char_shift!('j', 'J', shift),
        Keycode::K => convert_char_shift!('k', 'K', shift),
        Keycode::L => convert_char_shift!('l', 'L', shift),
        Keycode::M => convert_char_shift!('m', 'M', shift),
        Keycode::N => convert_char_shift!('n', 'N', shift),
        Keycode::O => convert_char_shift!('o', 'O', shift),
        Keycode::P => convert_char_shift!('p', 'P', shift),
        Keycode::Q => convert_char_shift!('q', 'Q', shift),
        Keycode::R => convert_char_shift!('r', 'R', shift),
        Keycode::S => convert_char_shift!('s', 'S', shift),
        Keycode::T => convert_char_shift!('t', 'T', shift),
        Keycode::U => convert_char_shift!('u', 'U', shift),
        Keycode::V => convert_char_shift!('v', 'V', shift),
        Keycode::W => convert_char_shift!('w', 'W', shift),
        Keycode::X => convert_char_shift!('x', 'X', shift),
        Keycode::Y => convert_char_shift!('y', 'Y', shift),
        Keycode::Z => convert_char_shift!('z', 'Z', shift),
        Keycode::Num1 => convert_char_shift!('1', '!', shift),
        Keycode::Num2 => Key::Char('2'),
        Keycode::Num3 => convert_char_shift!('3', '#', shift),
        Keycode::Num4 => convert_char_shift!('4', '$', shift),
        Keycode::Num5 => convert_char_shift!('5', '%', shift),
        Keycode::Num6 => convert_char_shift!('6', '^', shift),
        Keycode::Num7 => convert_char_shift!('7', '&', shift),
        Keycode::Num8 => convert_char_shift!('8', '*', shift),
        Keycode::Num9 => convert_char_shift!('9', '(', shift),
        Keycode::Num0 => convert_char_shift!('0', ')', shift),
        Keycode::Left => Key::Left,
        Keycode::Right => Key::Right,
        Keycode::Up => Key::Up,
        Keycode::Down => Key::Down,
        Keycode::Escape => keys::ESCAPE,
        Keycode::Return => keys::RETURN,
        Keycode::At => Key::Char('@'),
        Keycode::Plus => Key::Char('+'),
        Keycode::Minus => Key::Char('-'),
        Keycode::Period => Key::Char('.'),
        Keycode::Comma => Key::Char(','),
        Keycode::Semicolon => Key::Char(';'),
        Keycode::Equals => convert_char_shift!('=', '+', shift),
        Keycode::Backslash => convert_char_shift!('\\', '|', shift),
        Keycode::Backquote => convert_char_shift!('`', '~', shift),
        Keycode::Quote => convert_char_shift!('\'', '"', shift),
        Keycode::LeftBracket => convert_char_shift!('[', '{', shift),
        Keycode::RightBracket => convert_char_shift!(']', '}', shift),
        Keycode::PageUp => Key::PageUp,
        Keycode::PageDown => Key::PageDown,
        Keycode::Home => Key::Home,
        Keycode::End => Key::End,
        Keycode::F1 => Key::Function(1),
        Keycode::F2 => Key::Function(2),
        Keycode::F3 => Key::Function(3),
        Keycode::F4 => Key::Function(4),
        Keycode::F5 => Key::Function(5),
        Keycode::F6 => Key::Function(6),
        Keycode::F7 => Key::Function(7),
        Keycode::F8 => Key::Function(8),
        Keycode::F9 => Key::Function(9),
        Keycode::F10 => Key::Function(10),
        Keycode::F11 => Key::Function(11),
        Keycode::F12 => Key::Function(12),
        Keycode::F13 => Key::Function(13),
        Keycode::F14 => Key::Function(14),
        Keycode::F15 => Key::Function(15),
        Keycode::F16 => Key::Function(16),
        Keycode::F17 => Key::Function(17),
        Keycode::F18 => Key::Function(18),
        Keycode::F19 => Key::Function(19),
        Keycode::F20 => Key::Function(20),
        Keycode::F21 => Key::Function(21),
        Keycode::F22 => Key::Function(22),
        Keycode::F23 => Key::Function(23),
        Keycode::F24 => Key::Function(24),
        Keycode::Backspace => keys::BACKSPACE,
        Keycode::Delete => Key::Delete,
        _ => return None,
    };
    Some(key)
}
